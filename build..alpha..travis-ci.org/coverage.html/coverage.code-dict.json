{"/home/travis/build/npmtest/node-npmtest-inline-css/test.js":"/* istanbul instrument in package npmtest_inline_css */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-inline-css/lib.npmtest_inline_css.js":"/* istanbul instrument in package npmtest_inline_css */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_inline_css = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_inline_css = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-inline-css/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-inline-css && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_inline_css */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_inline_css\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_inline_css.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_inline_css.rollup.js'] =\n            local.assetsDict['/assets.npmtest_inline_css.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_inline_css.__dirname + '/lib.npmtest_inline_css.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-inline-css/node_modules/inline-css/index.js":"'use strict';\n\nvar Promise = require('bluebird'),\n    extend = require('extend'),\n    inlineContent = require('./lib/inlineContent');\n\nmodule.exports = function (html, options) {\n    return new Promise(function (resolve, reject) {\n        var opt = extend({\n            extraCss: '',\n            applyStyleTags: true,\n            removeStyleTags: true,\n            applyLinkTags: true,\n            removeLinkTags: true,\n            preserveMediaQueries: false,\n            removeHtmlSelectors: false,\n            applyWidthAttributes: false,\n            applyTableAttributes: false,\n            xmlMode: false,\n            decodeEntities: false,\n            lowerCaseTags: true,\n            lowerCaseAttributeNames: false,\n            recognizeCDATA: false,\n            recognizeSelfClosing: false\n        }, options);\n\n        inlineContent(html, opt)\n            .then(function (data) {\n                resolve(data);\n            })\n            .catch(function (err) {\n                reject(err);\n            });\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-inline-css/node_modules/inline-css/lib/inlineContent.js":"'use strict';\n\nvar Promise = require('bluebird'),\n    extractCss = require('extract-css'),\n    inlineCss = require('./inline-css');\n\nmodule.exports = function inlineContent(src, options) {\n    return new Promise(function (resolve, reject) {\n        var content;\n\n        if (!options.url) {\n            reject('options.url is required');\n        }\n\n        extractCss(src, options, function (err, html, css) {\n            var extraCss;\n\n            if (err) {\n                return reject(err);\n            }\n\n            extraCss = css + '\\n' + options.extraCss;\n\n            try {\n                content = inlineCss(html, extraCss, options);\n            } catch (e) {\n                return reject(e);\n            }\n\n            resolve(content);\n        });\n    });\n\n};\n","/home/travis/build/npmtest/node-npmtest-inline-css/node_modules/inline-css/lib/inline-css.js":"'use strict';\n\nvar parseCSS = require('css-rules'),\n    cheerio = require('cheerio'),\n    pseudoCheck = require('./pseudoCheck'),\n    handleRule = require('./handleRule'),\n    flatten = require('flatten'),\n    setStyleAttrs = require('./setStyleAttrs'),\n    setWidthAttrs = require('./setWidthAttrs'),\n    removeClassId = require('./removeClassId'),\n    setTableAttrs = require('./setTableAttrs'),\n    pick = require('object.pick');\n\nmodule.exports = function (html, css, options) {\n    var opts = options || {},\n        rules,\n        editedElements = [],\n        $ = cheerio.load(html, pick(opts, [\n            'xmlMode',\n            'decodeEntities',\n            'lowerCaseTags',\n            'lowerCaseAttributeNames',\n            'recognizeCDATA',\n            'recognizeSelfClosing'\n        ]));\n\n    try {\n        rules = parseCSS(css);\n    } catch (err) {\n        throw new Error(err);\n    }\n\n    rules.forEach(function (rule) {\n        var el,\n            ignoredPseudos;\n\n        ignoredPseudos = pseudoCheck(rule);\n\n        if (ignoredPseudos) {\n            return false;\n        }\n\n        try {\n            el = handleRule(rule, $);\n\n            editedElements.push(el);\n        } catch (err) {\n            // skip invalid selector\n            return false;\n        }\n    });\n\n    // flatten array if nested\n    editedElements = flatten(editedElements);\n\n    editedElements.forEach(function (el) {\n        setStyleAttrs(el, $);\n\n        if (opts.applyWidthAttributes) {\n            setWidthAttrs(el, $);\n        }\n\n        if (opts.removeHtmlSelectors) {\n            removeClassId(el, $);\n        }\n    });\n\n    if (opts.applyTableAttributes) {\n        $('table').each(function (index, el) {\n            setTableAttrs(el, $);\n        });\n    }\n\n    return $.html();\n};\n","/home/travis/build/npmtest/node-npmtest-inline-css/node_modules/inline-css/lib/pseudoCheck.js":"'use strict';\n\nvar cssSelector = require('style-selector');\n\nfunction parseSelector(rule) {\n    var sel = rule[0],\n        selector = cssSelector(sel);\n\n    return selector.parsed();\n}\n\nmodule.exports = function (rule) {\n    var i,\n        j,\n        subSelPseudos,\n        ignoredPseudos = [ 'hover', 'active', 'focus', 'visited', 'link' ],\n\n        // skip rule if the selector has any pseudos which are ignored\n        parsedSelector = parseSelector(rule);\n\n    for (i = 0; i < parsedSelector.length; ++i) {\n        subSelPseudos = parsedSelector[i].pseudos;\n\n        if (subSelPseudos) {\n            for (j = 0; j < subSelPseudos.length; ++j) {\n                if (ignoredPseudos.indexOf(subSelPseudos[j].name) >= 0) {\n                    return false;\n                }\n            }\n        }\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-inline-css/node_modules/inline-css/lib/handleRule.js":"'use strict';\n\nvar cssSelector = require('style-selector'),\n    parseCSS = require('css-rules'),\n    styleSelector = cssSelector('<style attribute>', [ 1, 0, 0, 0 ]),\n    addProps = require('./addProps');\n\nmodule.exports = function (rule, $) {\n    var sel = rule[0],\n        style = rule[1],\n        selector = cssSelector(sel),\n        editedElements = [];\n\n    $(sel).each(function (index, el) {\n        var cssText;\n\n        if (!el.styleProps) {\n            el.styleProps = {};\n\n            // if the element has inline styles, fake selector with topmost specificity\n            if ($(el).attr('style')) {\n                cssText = '* { ' + $(el).attr('style') + ' } ';\n\n                addProps(el, parseCSS(cssText)[0][1], styleSelector);\n            }\n\n            // store reference to an element we need to compile style=\"\" attr for\n            editedElements.push(el);\n        }\n\n        addProps(el, style, selector);\n    });\n\n    return editedElements;\n};\n","/home/travis/build/npmtest/node-npmtest-inline-css/node_modules/inline-css/lib/addProps.js":"'use strict';\n\nvar cssSelector = require('style-selector'),\n    importantSelector = cssSelector('<!important>', [ 2, 0, 0, 0 ]),\n    property = require('css-property');\n\nfunction getProperty(style, name, selector) {\n    var value = style[name],\n        sel = style._importants[name] ? importantSelector : selector;\n\n    return property(name, value, sel);\n}\n\n// go through the properties\nmodule.exports = function (el, style, selector) {\n    var i,\n        l = style.length,\n        name,\n        prop,\n        existing,\n        winner;\n\n    for (i = 0; i < l; i++) {\n        name = style[i];\n        prop = getProperty(style, name, selector);\n        existing = el.styleProps[name];\n\n        if (existing) {\n            winner = existing.compare(prop);\n\n            if (winner === prop) {\n                el.styleProps[name] = prop;\n            }\n        } else {\n            el.styleProps[name] = prop;\n        }\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-inline-css/node_modules/inline-css/lib/setStyleAttrs.js":"'use strict';\n\nmodule.exports = function (el, $) {\n    var i,\n        style = [];\n\n    for (i in el.styleProps) {\n\n        // add !important\n        if (typeof el.styleProps[i].selector.spec !== 'undefined') {\n            if (el.styleProps[i].selector.spec[0] === 2) {\n                el.styleProps[i].value += ' !important';\n            }\n        }\n        style.push(el.styleProps[i].prop + ': ' + el.styleProps[i].value.replace(/[\"]/g, '\\'') + ';');\n    }\n\n    // sorting will arrange styles like padding: before padding-bottom: which will preserve the expected styling\n    style = style.sort(function (a, b) {\n        var aProp = a.split(':')[0],\n            bProp = b.split(':')[0];\n\n        return (aProp > bProp ? 1 : aProp < bProp ? -1 : 0);\n    });\n\n    $(el).attr('style', style.join(' '));\n};\n","/home/travis/build/npmtest/node-npmtest-inline-css/node_modules/inline-css/lib/setWidthAttrs.js":"'use strict';\n\nvar widthElements = [ 'table', 'td', 'img' ];\n\nmodule.exports = function (el, $) {\n    var i,\n        pxWidth;\n\n    if (widthElements.indexOf(el.name) > -1) {\n        for (i in el.styleProps) {\n            if (el.styleProps[i].prop === 'width' && el.styleProps[i].value.match(/px/)) {\n                pxWidth = el.styleProps[i].value.replace('px', '');\n\n                $(el).attr('width', pxWidth);\n                return;\n            }\n        }\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-inline-css/node_modules/inline-css/lib/removeClassId.js":"'use strict';\n\nmodule.exports = function (el, $) {\n    var selectors = [ 'class', 'id' ];\n\n    selectors.forEach(function (selector) {\n        var attribute = $(el).attr(selector);\n\n        if (typeof attribute !== 'undefined') {\n            $(el).removeAttr(selector);\n        }\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-inline-css/node_modules/inline-css/lib/setTableAttrs.js":"'use strict';\n\nvar cheerio = require('cheerio'),\n    tableStyleAttrMap = {\n        table: {\n            float: 'align',\n            'background-color': 'bgcolor',\n            width: 'width',\n            height: 'height'\n        },\n        tr: {\n            'background-color': 'bgcolor',\n            'vertical-align': 'valign',\n            'text-align': 'align'\n        },\n        'td,th': {\n            'background-color': 'bgcolor',\n            width: 'width',\n            height: 'height',\n            'vertical-align': 'valign',\n            'text-align': 'align',\n            'white-space': 'nowrap'\n        },\n        'tbody,thead,tfoot': {\n            'vertical-align': 'valign',\n            'text-align': 'align'\n        }\n    },\n    applyStylesAsProps = function ($el, styleToAttrMap) {\n        var style,\n            styleVal;\n\n        for (style in styleToAttrMap) {\n            styleVal = $el.css(style);\n\n            if (styleVal !== undefined) {\n                $el.attr(styleToAttrMap[style], styleVal);\n                $el.css(style, '');\n            }\n        }\n    },\n    batchApplyStylesAsProps = function ($el, sel, $) {\n        $el.find(sel).each(function (i, childEl) {\n            applyStylesAsProps($(childEl), tableStyleAttrMap[sel]);\n        });\n    };\n\ncheerio.prototype.resetAttr = function (attribute) {\n    if (!this.attr(attribute)) {\n        this.attr(attribute, 0);\n    }\n    return this;\n};\n\nmodule.exports = function (el, $) {\n    var selector,\n        $el = $(el);\n\n    $el = $el.resetAttr('border')\n        .resetAttr('cellpadding')\n        .resetAttr('cellspacing');\n\n    for (selector in tableStyleAttrMap) {\n        if (selector === 'table') {\n            applyStylesAsProps($el, tableStyleAttrMap.table);\n        } else {\n            batchApplyStylesAsProps($el, selector, $);\n        }\n    }\n};\n"}